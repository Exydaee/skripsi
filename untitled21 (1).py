# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vsZJwDNm6EX2up4xVci88vS012-M85vh
"""

# Import Library


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import davies_bouldin_score
from pyclustering.cluster.kmedoids import kmedoids
from pyclustering.utils import calculate_distance_matrix
import random
from sklearn.impute import SimpleImputer

# Load Data

uploaded_file = st.file_uploader("Upload file CSV", type=["csv"])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file, delimiter=';')  # atau ',' jika file kamu pakai koma
    st.write(df.head())


# Tampilkan beberapa data untuk cek
print(df.head())

# Prepocessing

# Ubah koma menjadi titik dan "-" menjadi NaN, lalu konversi ke float
for col in df.select_dtypes(include=['object']).columns:
    try:
        df[col] = df[col].str.replace('-', 'NaN').str.replace(',', '.').astype(float)
    except:
        pass

# Imputasi nilai kosong
imputer = SimpleImputer(strategy='mean')
df[df.columns] = imputer.fit_transform(df)

# Hitung Rata-rata Pengetahuan
df["Pengetahuan_Sains"] = df[["IPA", "MTK", "BIN", "BING", "SUN", "PAI", "PKN"]].mean(axis=1)
df["Pengetahuan_Sosial"] = df[["IPS", "BIN", "BING", "SUN", "PAI", "PKN"]].mean(axis=1)

# Nilai Keterampilan Tertinggi
# Tentukan nilai keterampilan tertinggi dari 3 mata pelajaran
def keterampilan_tertinggi(row):
    nilai = {}

    if pd.notna(row.get("SBDY")):
        nilai["SBDY"] = row["SBDY"]
    if pd.notna(row.get("PNJ")):
         nilai["PNJ"] = row["PNJ"]
    if pd.notna(row.get("PRK")):
        nilai["PRK"] = row["PRK"]

    if nilai:
        return max(nilai, key=nilai.get)
    else:
        return np.nan

df["Keterampilan_Tertinggi"] = df.apply(keterampilan_tertinggi, axis=1)

def nilai_keterampilan_tertinggi(row):
    return max([row["PNJ"], row["SBDY"], row["PRK"]])

df["Nilai_Keterampilan_Tertinggi"] = df[["PNJ", "SBDY", "PRK"]].max(axis=1)


# Pilih fitur untuk klasterisasi
features_for_clustering = ["Pengetahuan_Sains", "Pengetahuan_Sosial", "Nilai_Keterampilan_Tertinggi"]
X = df[features_for_clustering]

# Tampilkan hasil preprocessing

print("\n Setelah Proses Preprocessing")
display_cols = ["NIS", "Pengetahuan_Sains", "Pengetahuan_Sosial", "PRK", "SBDY", "PNJ", "Keterampilan_Tertinggi"]
display_cols_existing = [col for col in display_cols if col in df.columns]

# Ambil 5 teratas dan 5 terbawah
top_5 = df[display_cols_existing].head(5)
bottom_5 = df[display_cols_existing].tail(5)

# Gabungkan dan tampilkan
print(pd.concat([top_5, bottom_5]))

# Normalisasi fitur

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Ubah larik NumPy yang telah diskalakan kembali ke DataFrame untuk memudahkan pemeriksaan
# Gunakan nama kolom asli dari X
X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)

print(X_scaled_df.head())

# Elbow Method

wcss = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(8, 4))
plt.plot(range(1, 11), wcss, marker='o')
plt.title("Metode Elbow untuk Menentukan Jumlah Klaster")
plt.xlabel("Jumlah Klaster")
plt.ylabel("WCSS")
plt.grid(True)
plt.show()

# K-Means Clustering

k = int(input("Masukkan jumlah klaster optimal dari grafik Elbow: "))
kmeans = KMeans(n_clusters=k, random_state=42)
df["Klaster_KMeans"] = kmeans.fit_predict(X_scaled)

print("\nðŸ“‹ Hasil Klaster K-Means:")
# Ganti df_kmeans dengan df untuk menampilkan DataFrame yang sudah diperbarui
display(df.head())

# K-Medoids Clustering

data_size = X_scaled.shape[0]
initial_medoids = random.sample(range(data_size), k)
kmedoids_instance = kmedoids(data=X_scaled, initial_index_medoids=initial_medoids, method="pam")
kmedoids_instance.process()
clusters = kmedoids_instance.get_clusters()

labels = np.zeros(data_size, dtype=int)
for cluster_id, cluster_indices in enumerate(clusters):
    for index in cluster_indices:
        labels[index] = cluster_id

df["Klaster_KMedoids"] = labels


print("\nðŸ“‹ Hasil Klaster K-Medoids:")
display(df.head())

# Evaluasi DBI

dbi_kmeans = davies_bouldin_score(X_scaled, df["Klaster_KMeans"])
dbi_kmedoids = davies_bouldin_score(X_scaled, df["Klaster_KMedoids"])

print("\n Hasil Davies-Bouldin Index ")
print(f"K-Means: {dbi_kmeans:.4f}")
print(f"K-Medoids: {dbi_kmedoids:.4f}")

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.colors as mcolors
import random
import numpy as np

# Definisikan warna berbeda untuk K-Means dan K-Medoids
color_list_kmeans = ['orange', 'blue', 'green']  # Untuk K-Means
color_list_kmedoids = ['red', 'purple', 'pink']  # Untuk K-Medoids (berbeda dari K-Means)

# Pastikan jumlah warna sesuai jumlah klaster
num_clusters_kmeans = len(df['Klaster_KMeans'].unique())
num_clusters_kmedoids = len(df['Klaster_KMedoids'].unique())

cluster_colors_kmeans = {i: color_list_kmeans[i] for i in range(num_clusters_kmeans)}
cluster_colors_kmedoids = {i: color_list_kmedoids[i] for i in range(num_clusters_kmedoids)}

# Tambahkan kolom warna ke DataFrame
df['Warna_KMeans'] = df['Klaster_KMeans'].map(cluster_colors_kmeans)
df['Warna_KMedoids'] = df['Klaster_KMedoids'].map(cluster_colors_kmedoids)

# Buat legend otomatis untuk K-Means
legend_elements_kmeans = [
    plt.Line2D([0], [0], marker='o', color='w', label=f'Klaster {i}',
               markerfacecolor=color, markersize=10)
    for i, color in cluster_colors_kmeans.items()
]

# Buat legend otomatis untuk K-Medoids
legend_elements_kmedoids = [
    plt.Line2D([0], [0], marker='o', color='w', label=f'Klaster {i}',
               markerfacecolor=color, markersize=10)
    for i, color in cluster_colors_kmedoids.items()
]

fig = plt.figure(figsize=(14, 6))

# K-Means
ax1 = fig.add_subplot(121, projection='3d')
ax1.scatter(
    df["Pengetahuan_Sains"], df["Pengetahuan_Sosial"], df["Nilai_Keterampilan_Tertinggi"],
    c=df["Warna_KMeans"], s=60
)
ax1.set_title("3D Scatter Plot K-Means")
ax1.set_xlabel("Pengetahuan Sains")
ax1.set_ylabel("Pengetahuan Sosial")
ax1.set_zlabel("Nilai Keterampilan Tertinggi")
ax1.legend(handles=legend_elements_kmeans, title='Klaster')

# K-Medoids
ax2 = fig.add_subplot(122, projection='3d')
ax2.scatter(
    df["Pengetahuan_Sains"], df["Pengetahuan_Sosial"], df["Nilai_Keterampilan_Tertinggi"],
    c=df["Warna_KMedoids"], s=60
)
ax2.set_title("3D Scatter Plot K-Medoids")
ax2.set_xlabel("Pengetahuan Sains")
ax2.set_ylabel("Pengetahuan Sosial")
ax2.set_zlabel("Nilai Keterampilan Tertinggi")
ax2.legend(handles=legend_elements_kmedoids, title='Klaster')

plt.tight_layout()
plt.show()

# Simpan hasil klaster
df["Cluster_KMeans"] = kmeans.labels_

# Visualisasi pie chart KMeans
plt.figure()
df["Cluster_KMeans"].value_counts().sort_index().plot.pie(
    autopct='%1.1f%%', colors=[cluster_colors_kmeans[i] for i in sorted(cluster_colors_kmeans)]
)
plt.title("Distribusi Klaster - KMeans")
plt.ylabel('')
plt.show()

# Proses K-Medoids
initial_medoids = random.sample(range(len(X_scaled)), 3)
kmedoids_instance = kmedoids(X_scaled.tolist(), initial_medoids)
kmedoids_instance.process()
clusters = kmedoids_instance.get_clusters()

# Buat label K-Medoids berdasarkan urutan cluster
kmedoids_labels = np.zeros(len(X_scaled))
for cluster_id, cluster in enumerate(clusters):
    for idx in cluster:
        kmedoids_labels[idx] = cluster_id

df["Cluster_KMedoids"] = kmedoids_labels

# Visualisasi pie chart KMedoids
plt.figure()
df["Cluster_KMedoids"].value_counts().sort_index().plot.pie(
    autopct='%1.1f%%', colors=[cluster_colors_kmedoids[i] for i in sorted(cluster_colors_kmedoids)]
)
plt.title("Distribusi Klaster - KMedoids")
plt.ylabel('')
plt.show()

plt.figure(figsize=(12, 5))

# Buat kolom gabungan: Pengetahuan dominan + Keterampilan tertinggi
df['Gabungan'] = df.apply(
    lambda row: f"{'Sains' if row['Pengetahuan_Sains'] > row['Pengetahuan_Sosial'] else 'Sosial'} - {row['Keterampilan_Tertinggi']}", axis=1
)

# Hitung jumlah siswa per kombinasi
gabungan_counts = df['Gabungan'].value_counts()

# Tampilkan pie chart dengan ruang ekstra antara diagram dan judul
plt.figure(figsize=(8, 8))
plt.pie(
    gabungan_counts, labels=gabungan_counts.index, autopct='%1.1f%%',
    startangle=90, colors=plt.cm.Paired.colors
)
plt.title('Distribusi Gabungan Pengetahuan dan Keterampilan Tertinggi Siswa', pad=30)
plt.axis('equal')
plt.tight_layout()
plt.show()
